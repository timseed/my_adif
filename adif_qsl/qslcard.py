# Actually from pillow
from PIL import Image, ImageDraw, ImageFont
import logging
import logging.config
from adif_qso import adif_qso


class QslCard(adif_qso):
    def __init__(self, adif_filename):
        """
        ADIF QSL Printing
        :param adif_filename:
        """
        self.logger = logging.getLogger(__name__)
        print("Class is called " + __name__)
        self.logger.debug("qsl class init")
        adif_qso.__init__(self, adif_filename)
        self.logger.debug("qso class init")

    def qsl(self, callsign):
        self.logger.debug("check for call {}".format(callsign))
        prevqso = self.check_call(callsign)
        if len(prevqso):
            self.logger.debug("Got {} records for {}".format(len(prevqso), callsign))

            im = Image.open("blank.png")
            draw = ImageDraw.Draw(im)
            self.logger.debug("Original Image file Opened")
            # get a font
            # Fonts generated by
            # mkdir fonts && cd fonts
            # fondu /System/Library/Fonts/Helvetica.dfont
            # cp * /Users/tim/pe35/lib/python3.5/site-packages

            fnt2 = ImageFont.truetype('Times', 30)
            fnt = ImageFont.truetype('Courier', 30)
            col = (0, 0, 0, 18)
            self.logger.debug("Printing Header")
            header_str = prevqso[0]['call']

            draw.text((10, 50), "A45WG is confirming QSO(s) with {} ".format(prevqso[0]['call']), (10, 10, 0), font=fnt2)
            draw.text((10, 350), "73s and good Dx de Tim", (10, 10, 0),
                      font=fnt2)

            startx = 30
            starty = 130
            y = starty
            text_pos=[]
            text=['Band','Freq',' ','Date','Sent','Recv']
            for q in prevqso:
                x = startx
                # draw text, half opacity
                draw.text((x, y), q['band'], font=fnt, fill=col)
                text_pos.append(x)
                x = x + 80
                draw.text((x, y), q['freq'][:5], font=fnt, fill=col)
                text_pos.append(x)
                x = x + 100
                draw.text((x, y), q['mode'], font=fnt, fill=col)
                text_pos.append(x)
                x = x + 60
                draw.text((x, y), "{}-{}-{}".format(q['qso_date'][:4],q['qso_date'][4:6],
                                                    q['qso_date'][6:]), font=fnt, fill=col)
                text_pos.append(x)
                x = x + 200
                draw.text((x, y), q['rst_sent'], font=fnt, fill=col)
                text_pos.append(x)
                x = x + 80
                draw.text((x, y), q['rst_rcvd'], font=fnt, fill=col)
                text_pos.append(x)
                y = y + 30
                x = x + 50
                self.logger.debug("QSO Output")
            #The QSO Box
            draw.line((startx - 10, starty - 10) + (startx - 10, y), fill=128)
            draw.line((x + 10, starty - 10) + (x + 10, y), fill=128)
            draw.line((startx - 10, starty - 10) + (x + 10, starty - 10), fill=128)
            draw.line((startx - 10, y) + (x + 10, y), fill=128)
            #Header Box
            draw.line((startx - 10, starty - 10) + (startx - 10, starty - 40), fill=128)
            draw.line((x + 10, starty - 10) + (x + 10, starty -40), fill=128)
            draw.line((startx - 10, starty - 40) + (x + 10, starty -40), fill=128)
            pos=0
            for a in text_pos[:6]:
                draw.text((-5+a, 95),text[pos],(10, 10, 0),font=fnt2)
                pos += 1

            # del draw
            # write to stdout
            im.save("new.jpg", "jpeg")
        else:
            self.logger.warning("No calls found for call {}".format(callsign))

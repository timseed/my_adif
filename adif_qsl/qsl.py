# Actually from pillow
from PIL import Image, ImageDraw, ImageFont
import logging
import logging.config
from adif_qso import adif_qso


class qsl(adif_qso):
    def __init__(self, adif_filename):
        """
        ADIF QSL Printing
        :param adif_filename:
        """
        self.logger = logging.getLogger(__name__)
        print("Class is called "+__name__)
        self.logger.debug("qsl class init")
        adif_qso.__init__(self,adif_filename)
        self.logger.debug("qso class init")

    def qsl(self, callsign):
        self.logger.debug("check for call {}".format(callsign))
        prevqso = self.check_call(callsign)
        if len(prevqso):
            self.logger.debug("Got {} records for {}".format(len(prevqso), callsign))

            im = Image.open("blank.png")
            draw = ImageDraw.Draw(im)
            self.logger.debug("Original Image file Opened")
            # get a font
            # Fonts generated by
            # mkdir fonts && cd fonts
            # fondu /System/Library/Fonts/Helvetica.dfont
            # cp * /Users/tim/pe35/lib/python3.5/site-packages
            fnt = ImageFont.truetype('Courier',30)
            col =(0,255,255,128)
            draw.text((100,300),"Confirming QSO with {} ".format(prevqso[0]['call']),font=fnt,fil=col)

            y=200
            for q in prevqso:
                self.logger.debug("QSO on {}".format(q['freq']))
                x=200
                # draw text, half opacity
                draw.text((x,y), q['band'], font=fnt, fill=col)
                x=x+50
                draw.text((x,y), q['freq'], font=fnt, fill=col)
                y=y+50

            #del draw
            # write to stdout
            im.save("new.jpg", "jpeg")
        else:
            self.logger.warning("No calls found for call {}".format(callsign))


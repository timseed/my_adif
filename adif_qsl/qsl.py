# Actually from pillow
from PIL import Image, ImageDraw, ImageFont
import logging
import logging.config
from adif_qso import adif_qso


class qsl(adif_qso):
    def __init__(self, adif_filename):
        """
        ADIF QSL Printing
        :param adif_filename:
        """
        self.logger = logging.getLogger(__name__)
        print("Class is called " + __name__)
        self.logger.debug("qsl class init")
        adif_qso.__init__(self, adif_filename)
        self.logger.debug("qso class init")

    def qsl(self, callsign):
        self.logger.debug("check for call {}".format(callsign))
        prevqso = self.check_call(callsign)
        if len(prevqso):
            self.logger.debug("Got {} records for {}".format(len(prevqso), callsign))

            im = Image.open("blank.png")
            draw = ImageDraw.Draw(im)
            self.logger.debug("Original Image file Opened")
            # get a font
            # Fonts generated by
            # mkdir fonts && cd fonts
            # fondu /System/Library/Fonts/Helvetica.dfont
            # cp * /Users/tim/pe35/lib/python3.5/site-packages
            fnt = ImageFont.truetype('Courier', 30)
            col = (0, 0, 0, 18)
            self.logger.debug("Printing Header")
            header_str=prevqso[0]['call']
            draw.text((30, 30), header_str, font=fnt, fil=col)


            startx=50
            starty=200
            y = starty
            for q in prevqso:
                x = 50
                # draw text, half opacity
                draw.text((x, y), q['band'], font=fnt, fill=col)
                x = x + 80
                draw.text((x, y), q['freq'][:5], font=fnt, fill=col)
                x = x + 120
                draw.text((x, y), q['mode'], font=fnt, fill=col)
                x = x + 60
                draw.text((x, y), q['qso_date'], font=fnt, fill=col)
                x = x + 160
                draw.text((x, y), q['rst_sent'], font=fnt, fill=col)
                x = x + 80
                draw.text((x, y), q['rst_rcvd'], font=fnt, fill=col)
                y = y + 30
                x = x+50
                self.logger.debug("QSO Output")
            draw.line((startx - 10, starty - 10) + (startx - 10, y), fill=128)
            draw.line((x + 10, starty - 10) + (x + 10, y), fill=128)
            draw.line((startx - 10, starty - 10) + (x+10, starty-10), fill=128)
            draw.line((startx - 10, y ) + (x + 10, y ), fill=128)

            # del draw
            # write to stdout
            im.save("new.jpg", "jpeg")
        else:
            self.logger.warning("No calls found for call {}".format(callsign))
